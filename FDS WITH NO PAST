// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © ASTROKID22
//@version=5
indicator("FDS WITH NO PAST", overlay=false, max_labels_count=500)

// === Inputs ===
lookback = input.int(50, "Lookback (Pearson r)", minval=5)
atr_len  = input.int(14, "ATR Length", minval=1)
normalize = input.bool(true, "Normalize ATR by Price?", tooltip="If true, ATR is shown as ATR/price (percent). If false, ATR is raw price units.")
easy_th  = input.float(0.0003, "Easy Threshold", step=0.0001)
hard_th  = input.float(0.0010, "Hard Threshold", step=0.0001)

// === Pearson r calculation (oldest -> newest ordering) ===
var float r = na
if bar_index >= lookback - 1
    // compute means using oldest-to-newest ordering
    float mean_x = 0.0
    float mean_y = 0.0
    for i = 0 to lookback - 1
        mean_x += i
        mean_y += close[lookback - 1 - i]
    mean_x /= lookback
    mean_y /= lookback

    float numerator = 0.0
    float denom_x = 0.0
    float denom_y = 0.0
    for i = 0 to lookback - 1
        float x = i
        float y = close[lookback - 1 - i]  // map 0 -> oldest, lookback-1 -> newest
        float dx = x - mean_x
        float dy = y - mean_y
        numerator += dx * dy
        denom_x += dx * dx
        denom_y += dy * dy
    r := numerator / math.sqrt(math.max(1e-12, denom_x * denom_y))

r_abs = math.abs(r)

// === ATR values (raw and normalized) ===
atr_raw = ta.atr(atr_len)
atr_pct = atr_raw / close
atr_used = normalize ? atr_pct : atr_raw

// === Difficulty scores ===
ds = r * atr_used
nds = r_abs * atr_used // named nds for absolute DS

// === Color function ===
get_color(v) =>
    v_abs = math.abs(v)
    v_abs < easy_th ? color.green : v_abs < hard_th ? color.orange : color.red

// === Table (3 columns x 6 rows) ===
var table ds_table = table.new(position.top_right, 3, 6, border_width=1)
if barstate.islast
    // Header (col,row)
    table.cell(ds_table, 0, 0, "Metric", text_color=color.white, bgcolor=color.black)
    table.cell(ds_table, 1, 0, "Value", text_color=color.white, bgcolor=color.black)
    table.cell(ds_table, 2, 0, "Notes", text_color=color.white, bgcolor=color.black)

    // Pearson r
    table.cell(ds_table, 0, 1, "r (time vs price)")
    table.cell(ds_table, 1, 1, str.tostring(r, "#.##########"))
    table.cell(ds_table, 2, 1, r >= 0 ? "Uptrend" : "Downtrend", text_color=r >= 0 ? color.green : color.red)

    // Absolute r
    table.cell(ds_table, 0, 2, "|r|")
    table.cell(ds_table, 1, 2, str.tostring(r_abs, "#.##########"))
    table.cell(ds_table, 2, 2, "Trend strength")

    // ATR (raw)
    table.cell(ds_table, 0, 3, "ATR (raw)")
    table.cell(ds_table, 1, 3, str.tostring(atr_raw, "#.##########"))
    table.cell(ds_table, 2, 3, "Price units")

    // ATR (%)
    table.cell(ds_table, 0, 4, "ATR% (ATR/price)")
    table.cell(ds_table, 1, 4, str.tostring(atr_pct, "#.##########"))
    table.cell(ds_table, 2, 4, normalize ? "Using for DS" : "Shown for reference")

    // Difficulty scores
    table.cell(ds_table, 0, 5, "DS (r) / DS(|r|)")
    table.cell(ds_table, 1, 5, str.tostring(ds, "#.##########") + " / " + str.tostring(nds, "#.##########"))
    table.cell(ds_table, 2, 5, nds < easy_th ? "Easy" : nds < hard_th ? "Medium" : "Hard", text_color=get_color(nds), bgcolor=color.new(get_color(nds), 80))

// === Plots ===
plot(ds, "DS (r)", color=color.new(color.blue, 0))
plot(nds, "DS (|r|)", color=color.new(color.purple, 0))
hline(easy_th, "Easy Threshold", color=color.green, linestyle=hline.style_dotted)
hline(hard_th, "Hard Threshold", color=color.red, linestyle=hline.style_dotted)
